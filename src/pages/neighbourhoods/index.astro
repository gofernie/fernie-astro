---
import Site from "../../layouts/Site.astro";

const title = "Neighbourhoods — Fernie";
const description = "Browse Fernie neighbourhoods (data from Google Sheets).";

function slugify(s = "") {
  return String(s).toLowerCase().trim()
    .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
}

async function fetchSheet(url) {
  if (!url) throw new Error("PUBLIC_SHEET_JSON missing. Add to .env and restart dev.");
  const r = await fetch(url, { cache:"no-store" });
  return r.json();
}

const url = import.meta.env.PUBLIC_SHEET_JSON;
let rows = [];
try {
  const raw = await fetchSheet(url);
  rows = raw.map(n => ({ ...n, _slug: (n.slug?.trim() || slugify(n.title || "")) }));
} catch {
  rows = [{ _slug:"", title:"Fallback", desc:"Sheet didn’t load.", img:"" }];
}

/* ---------- image helpers ----------
   - In dev: serve from /images/... so astro dev shows images.
   - In prod (Netlify): use Image CDN to get smaller files.
------------------------------------ */
function rawPath(img) {
  if (!img) return "";
  return img.startsWith("http") ? img : "/images/" + img;
}
function cdn(url, w, h) {
  // Netlify Image CDN (works on Netlify; dev will still render the raw src)
  return `/.netlify/images?url=${encodeURIComponent(url)}&w=${w}${h ? `&h=${h}&fit=cover` : "&fit=cover"}`;
}
function srcForCard(url, w=640, h=480) {
  return import.meta.env.PROD ? cdn(url, w, h) : url;
}
function srcsetForCard(url) {
  if (!import.meta.env.PROD) return undefined; // only use srcset in prod
  const sizes = [480, 640, 800, 960, 1200];
  return sizes.map(w => `${cdn(url, w, Math.round(w*0.75))} ${w}w`).join(", ");
}
---
<Site title={title} description={description} active="neighbourhoods">
  <style>
    .grid{display:grid;gap:16px;grid-template-columns:1fr}
    @media (min-width:640px){.grid{grid-template-columns:repeat(2,1fr)}}
    @media (min-width:960px){.grid{grid-template-columns:repeat(3,1fr)}}

    .card{border:1px solid #eee;border-radius:14px;overflow:hidden;background:#fff;
          box-shadow:0 1px 2px rgba(0,0,0,.04);
          transition:transform .18s ease, box-shadow .18s ease, border-color .18s ease;}
    @media (hover:hover){.card:hover{transform:translateY(-4px);box-shadow:0 8px 24px rgba(0,0,0,.08);border-color:#e6e6e6}}
    .card a{display:block;color:inherit;text-decoration:none}

    .card img{width:100%;height:auto;display:block;aspect-ratio:4/3;object-fit:cover}
    .inner{padding:12px}
    .inner h3{margin:6px 0;font-size:18px}
    .inner p{margin:0 0 8px;color:#444}
  </style>

  <h1>Neighbourhoods</h1>

  <section class="grid" aria-label="Neighbourhoods list">
    {rows.map((n, i) => {
      const raw = rawPath(n.img);
      const src = srcForCard(raw, 640, 480);           // default 640×480 on cards
      const srcset = srcsetForCard(raw);
      return (
        <article class="card">
          <a href={n._slug ? `/neighbourhoods/${n._slug}` : "#"}>
            {raw && (
              <img
                src={src}
                srcset={srcset}
                sizes="(min-width: 960px) 33vw, (min-width: 640px) 50vw, 100vw"
                alt={n.title}
                width="800" height="600"                 /* reserve space (4:3) for CLS */
                loading={i === 0 ? "eager" : "lazy"}     /* prioritize first card */
                fetchpriority={i === 0 ? "high" : undefined}
                decoding="async"
              />
            )}
            <div class="inner">
              <h3>{n.title}</h3>
              <p>{n.desc}</p>
            </div>
          </a>
        </article>
      );
    })}
  </section>
</Site>
