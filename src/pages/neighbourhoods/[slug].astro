---
import Site from "../../layouts/Site.astro";

/* Helpers */
function slugify(s = "") {
  return String(s)
    .toLowerCase()
    .trim()
    .replace(/&/g, "-and-")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
}

async function fetchJSON(url) {
  if (!url) throw new Error("PUBLIC_SHEET_JSON is missing.");
  const res = await fetch(url, { cache: "no-store" });
  const text = await res.text();

  if (!res.ok) {
    throw new Error(`Fetch failed ${res.status}: ${text.slice(0, 160)}`);
  }
  if (/^<!doctype html>|^<html/i.test(text.trim())) {
    throw new Error(
      "PUBLIC_SHEET_JSON returned HTML. Check Apps Script deploy ('Anyone' access) and that the URL includes ?tab=neighbourhoods."
    );
  }
  try {
    return JSON.parse(text);
  } catch {
    throw new Error("Response was not valid JSON. First 160 chars: " + text.slice(0, 160));
  }
}

/* Build-time: generate static pages for each neighbourhood slug */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_SHEET_JSON; // MUST be .../exec?tab=neighbourhoods
  const rows = await fetchJSON(url);

  const items = (rows ?? [])
    .map((r) => {
      const label = String(r.name ?? r.title ?? r.neighbourhood ?? "").trim();
      const slug = slugify(r.slug ?? label);
      return { ...r, _label: label, _slug: slug };
    })
    .filter((r) => r._slug);

  return items.map((n) => ({
    params: { slug: n._slug },
    props: { item: n },
  }));
}

const { item } = Astro.props;
const title = `${item.name ?? item.title ?? "Neighbourhood"} â€” Fernie`;
const description = item.desc ?? "";
const hero = item.hero ?? "/img/hero/fernie-hero.jpg";
---

<!-- HERO -->
<section
  class="relative h-[55vh] flex items-center justify-center bg-cover bg-center"
  style={`background-image: url('${hero}');`}
>
  <div class="absolute inset-0 bg-black/40"></div>
  <h1 class="relative text-white text-4xl font-semibold drop-shadow-md">
    {item.name ?? item.title ?? item._label}
  </h1>
</section>

<Site title={title} description={description} active="neighbourhoods">
  <section class="max-w-4xl mx-auto px-4 py-8 space-y-6">
    {item.desc && (
      <div class="bg-white rounded-2xl shadow-sm border border-zinc-200 p-6">
        <p class="text-lg leading-relaxed">{item.desc}</p>
      </div>
    )}
    <!-- Whatever else you render (maps, cards, etc.) -->
  </section>
</Site>
